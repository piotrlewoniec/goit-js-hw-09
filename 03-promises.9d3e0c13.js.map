{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,UAG4B,CACxBC,SAAUC,SAASC,cAAc,SAEjCC,cAAe,SAAUC,EAAUC,GACXC,KAAKC,SAAW,GAGpCC,EAAAV,GAASW,OAAOC,QACd,gCAA8BN,QAAiBC,OAIjDG,EAAAV,GAASW,OAAOE,QACd,+BAA6BP,QAAiBC,M,EAKpDO,qBAAsB,SAAUR,EAAUC,GACxC,MAAMQ,EAAgBP,KAAKC,SAAW,GACtCO,YAAW,KACLD,EAEFL,EAAAV,GAASW,OAAOC,QACd,wCAAsCN,QAAiBC,OAIzDG,EAAAV,GAASW,OAAOE,QACd,uCAAqCP,QAAiBC,MAAU,GAGnEA,E,EAGLU,qBAAsB,SAAUX,EAAUC,GACxC,OAAO,IAAIW,SAAQ,CAACC,EAASC,KAC3B,MAAML,EAAgBP,KAAKC,SAAW,GACtCO,YAAW,KACLD,EAEFI,EAAQ,C,SAAEb,E,MAAUC,IAGpBa,EAAO,C,SAAEd,E,MAAUC,GAAQ,GAE5BA,EAAM,G,EAGbc,WAAY,SAAUC,GACpBA,EAAMC,iBACN,MAAQhB,MAAAiB,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAMK,cACtCjB,EAAAV,GAASW,OAAOiB,KAAK,2BAA2BJ,EAAMK,WACtDnB,EAAAV,GAASW,OAAOiB,KAAK,qCAAqCH,EAAKI,WAC/DnB,EAAAV,GAASW,OAAOiB,KAAK,0BAA0BF,EAAOG,SAOtD,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOG,MAAOC,IAChCC,KAAKd,qBAAqBa,EAAI,GAAIN,EAAMK,QAASJ,EAAKI,MAAQC,GAC3DE,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBG,EAAAV,GAASW,OAAOC,QACd,uBAAqBN,QAAiBC,MAAU,IAGnD0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBG,EAAAV,GAASW,OAAOE,QACd,sBAAoBP,QAAiBC,MAAU,G,EAKzD2B,KAAM,WACJxB,EAAAV,GAASW,OAAOC,QAAQ,kCACxBmB,KAAK7B,SAASiC,iBACZ,SACA,SAAUb,GACRS,KAAKV,WAAWC,EACjB,EAACc,KAAKL,M,IAIKG","sources":["src/js/03-promises.js"],"sourcesContent":["'use strict';\nimport Notiflix from 'notiflix';\n(() => {\n  const promisesGenerator = {\n    formBind: document.querySelector('.form'),\n    //function\n    createPromise: function (position, delay) {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise function ${position} in ${delay}ms`\n        );\n      } else {\n        // Reject/\n        Notiflix.Notify.failure(\n          `❌ Rejected promise function ${position} in ${delay}ms`\n        );\n      }\n    },\n    //function with delay\n    createPromiseDelaied: function (position, delay) {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n          // Fulfill\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise delaied function ${position} in ${delay}ms`\n          );\n        } else {\n          // Reject/\n          Notiflix.Notify.failure(\n            `❌ Rejected promise delaied function ${position} in ${delay}ms`\n          );\n        }\n      }, delay);\n    },\n    //function with real promise\n    createPromiseRealOne: function (position, delay) {\n      return new Promise((resolve, reject) => {\n        const shouldResolve = Math.random() > 0.3;\n        setTimeout(() => {\n          if (shouldResolve) {\n            // Fulfill\n            resolve({ position, delay });\n          } else {\n            // Reject/\n            reject({ position, delay });\n          }\n        }, delay);\n      });\n    },\n    formSubmit: function (event) {\n      event.preventDefault();\n      const { delay, step, amount } = event.currentTarget;\n      Notiflix.Notify.info(`Delay of first promise: ${delay.value}ms`);\n      Notiflix.Notify.info(`Added delay to next each promise: ${step.value}ms`);\n      Notiflix.Notify.info(`Promises, to generate: ${amount.value}`);\n      // for (let i = 0; i < amount.value; i++) {\n      //   this.createPromise(i + 1, +delay.value + +step.value * i);\n      // }\n      // for (let i = 0; i < amount.value; i++) {\n      //   this.createPromiseDelaied(i + 1, +delay.value + +step.value * i);\n      // }\n      for (let i = 0; i < amount.value; i++) {\n        this.createPromiseRealOne(i + 1, +delay.value + +step.value * i)\n          .then(({ position, delay }) => {\n            Notiflix.Notify.success(\n              `✅ Fulfilled promise ${position} in ${delay}ms`\n            );\n          })\n          .catch(({ position, delay }) => {\n            Notiflix.Notify.failure(\n              `❌ Rejected promise ${position} in ${delay}ms`\n            );\n          });\n      }\n    },\n    init: function () {\n      Notiflix.Notify.success('Promises generator init succed');\n      this.formBind.addEventListener(\n        'submit',\n        function (event) {\n          this.formSubmit(event);\n        }.bind(this)\n      );\n    },\n  };\n  promisesGenerator.init();\n})();\n\n// Zadanie 3 - generator obietnic\n// Wykonuj to zadanie w plikach 03-promises.html i 03-promises.js. Obejrzyj wersję demonstracyjną wideo o działaniu generatora obietnic.\n\n// W HTML znajduje się znacznik formularza, w którego pola użytkownik będzie wprowadzał pierwsze opóźnienie w milisekundach, stopień zwiększenia opóźnienia dla każdej kolejnej obietnicy i liczbę obietnic, które należy utworzyć.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n// Napisz skrypt, który po wysłaniu formularza wywoła funkcję createPromise(position, delay) tyle razy, ile wprowadzono w pole amount. Po każdym wywołaniu przekaż jej numer utworzonej obietnicy (position) i opóźnienie, uwzględniając wprowadzone przez użytkownika pierwsze opóźnienie (delay) i stopień (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Uzupełnij kod funkcji createPromise tak, aby przywracała jedną obietnicę, którą realizuje się lub odkłada poprzez delay czasu. Wartością obietnicy powinien być obiekt, w którym będą właściwości position i delay z wartościami parametrów o tej samej nazwie. Użyj kodu początkowego funkcji, aby wybrać to, co należy zrobić z obietnicą - zrealizować lub odłożyć.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n//   Biblioteka powiadomień\n// UWAGA\n// Następna funkcja nie jest obowiązkowa przy oddawaniu zadania, ale będzie dobrą dodatkową praktyką.\n\n// Aby wyświetlić użytkownikowi powiadomienie, zamiast console.log() użyj biblioteki notiflix.\n"],"names":["$7Y9D8","parcelRequire","formBind","document","querySelector","createPromise","position","delay","Math","random","$parcel$interopDefault","Notify","success","failure","createPromiseDelaied","shouldResolve","setTimeout","createPromiseRealOne","Promise","resolve","reject","formSubmit","event","preventDefault","delay1","step","amount","currentTarget","info","value","i","this","then","catch","init","addEventListener","bind"],"version":3,"file":"03-promises.9d3e0c13.js.map"}